// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for githubmetricsreceiver metrics.
type MetricsSettings struct {
	GithubCodechangesAdditions MetricSettings `mapstructure:"github.codechanges.additions"`
	GithubCodechangesDeletions MetricSettings `mapstructure:"github.codechanges.deletions"`
	GithubCommitsFriday        MetricSettings `mapstructure:"github.commits.friday"`
	GithubCommitsMonday        MetricSettings `mapstructure:"github.commits.monday"`
	GithubCommitsSaturday      MetricSettings `mapstructure:"github.commits.saturday"`
	GithubCommitsSunday        MetricSettings `mapstructure:"github.commits.sunday"`
	GithubCommitsThursday      MetricSettings `mapstructure:"github.commits.thursday"`
	GithubCommitsTotalWeekly   MetricSettings `mapstructure:"github.commits.total.weekly"`
	GithubCommitsTuesday       MetricSettings `mapstructure:"github.commits.tuesday"`
	GithubCommitsWednesday     MetricSettings `mapstructure:"github.commits.wednesday"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		GithubCodechangesAdditions: MetricSettings{
			Enabled: true,
		},
		GithubCodechangesDeletions: MetricSettings{
			Enabled: true,
		},
		GithubCommitsFriday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsMonday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsSaturday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsSunday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsThursday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsTotalWeekly: MetricSettings{
			Enabled: true,
		},
		GithubCommitsTuesday: MetricSettings{
			Enabled: true,
		},
		GithubCommitsWednesday: MetricSettings{
			Enabled: true,
		},
	}
}

type metricGithubCodechangesAdditions struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.codechanges.additions metric with initial data.
func (m *metricGithubCodechangesAdditions) init() {
	m.data.SetName("github.codechanges.additions")
	m.data.SetDescription("Code additions to repo")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCodechangesAdditions) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCodechangesAdditions) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCodechangesAdditions) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCodechangesAdditions(settings MetricSettings) metricGithubCodechangesAdditions {
	m := metricGithubCodechangesAdditions{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCodechangesDeletions struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.codechanges.deletions metric with initial data.
func (m *metricGithubCodechangesDeletions) init() {
	m.data.SetName("github.codechanges.deletions")
	m.data.SetDescription("Code deletions to repo")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCodechangesDeletions) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCodechangesDeletions) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCodechangesDeletions) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCodechangesDeletions(settings MetricSettings) metricGithubCodechangesDeletions {
	m := metricGithubCodechangesDeletions{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsFriday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.friday metric with initial data.
func (m *metricGithubCommitsFriday) init() {
	m.data.SetName("github.commits.friday")
	m.data.SetDescription("Number of commits on Friday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsFriday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsFriday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsFriday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsFriday(settings MetricSettings) metricGithubCommitsFriday {
	m := metricGithubCommitsFriday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsMonday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.monday metric with initial data.
func (m *metricGithubCommitsMonday) init() {
	m.data.SetName("github.commits.monday")
	m.data.SetDescription("Number of commits on Monday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsMonday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsMonday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsMonday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsMonday(settings MetricSettings) metricGithubCommitsMonday {
	m := metricGithubCommitsMonday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsSaturday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.saturday metric with initial data.
func (m *metricGithubCommitsSaturday) init() {
	m.data.SetName("github.commits.saturday")
	m.data.SetDescription("Number of commits on Saturday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsSaturday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsSaturday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsSaturday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsSaturday(settings MetricSettings) metricGithubCommitsSaturday {
	m := metricGithubCommitsSaturday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsSunday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.sunday metric with initial data.
func (m *metricGithubCommitsSunday) init() {
	m.data.SetName("github.commits.sunday")
	m.data.SetDescription("Number of commits on Sunday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsSunday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsSunday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsSunday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsSunday(settings MetricSettings) metricGithubCommitsSunday {
	m := metricGithubCommitsSunday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsThursday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.thursday metric with initial data.
func (m *metricGithubCommitsThursday) init() {
	m.data.SetName("github.commits.thursday")
	m.data.SetDescription("Number of commits on Thursday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsThursday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsThursday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsThursday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsThursday(settings MetricSettings) metricGithubCommitsThursday {
	m := metricGithubCommitsThursday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsTotalWeekly struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.total.weekly metric with initial data.
func (m *metricGithubCommitsTotalWeekly) init() {
	m.data.SetName("github.commits.total.weekly")
	m.data.SetDescription("Number of total commits this week (beginning Sunday)")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsTotalWeekly) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsTotalWeekly) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsTotalWeekly) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsTotalWeekly(settings MetricSettings) metricGithubCommitsTotalWeekly {
	m := metricGithubCommitsTotalWeekly{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsTuesday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.tuesday metric with initial data.
func (m *metricGithubCommitsTuesday) init() {
	m.data.SetName("github.commits.tuesday")
	m.data.SetDescription("Number of commits on Tuesday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsTuesday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsTuesday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsTuesday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsTuesday(settings MetricSettings) metricGithubCommitsTuesday {
	m := metricGithubCommitsTuesday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricGithubCommitsWednesday struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills github.commits.wednesday metric with initial data.
func (m *metricGithubCommitsWednesday) init() {
	m.data.SetName("github.commits.wednesday")
	m.data.SetDescription("Number of commits on Wednesday")
	m.data.SetUnit("1")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricGithubCommitsWednesday) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricGithubCommitsWednesday) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricGithubCommitsWednesday) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricGithubCommitsWednesday(settings MetricSettings) metricGithubCommitsWednesday {
	m := metricGithubCommitsWednesday{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                        pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity                  int                 // maximum observed number of metrics per resource.
	resourceCapacity                 int                 // maximum observed number of resource attributes.
	metricsBuffer                    pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                        component.BuildInfo // contains version information
	metricGithubCodechangesAdditions metricGithubCodechangesAdditions
	metricGithubCodechangesDeletions metricGithubCodechangesDeletions
	metricGithubCommitsFriday        metricGithubCommitsFriday
	metricGithubCommitsMonday        metricGithubCommitsMonday
	metricGithubCommitsSaturday      metricGithubCommitsSaturday
	metricGithubCommitsSunday        metricGithubCommitsSunday
	metricGithubCommitsThursday      metricGithubCommitsThursday
	metricGithubCommitsTotalWeekly   metricGithubCommitsTotalWeekly
	metricGithubCommitsTuesday       metricGithubCommitsTuesday
	metricGithubCommitsWednesday     metricGithubCommitsWednesday
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, buildInfo component.BuildInfo, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                        pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                    pmetric.NewMetrics(),
		buildInfo:                        buildInfo,
		metricGithubCodechangesAdditions: newMetricGithubCodechangesAdditions(settings.GithubCodechangesAdditions),
		metricGithubCodechangesDeletions: newMetricGithubCodechangesDeletions(settings.GithubCodechangesDeletions),
		metricGithubCommitsFriday:        newMetricGithubCommitsFriday(settings.GithubCommitsFriday),
		metricGithubCommitsMonday:        newMetricGithubCommitsMonday(settings.GithubCommitsMonday),
		metricGithubCommitsSaturday:      newMetricGithubCommitsSaturday(settings.GithubCommitsSaturday),
		metricGithubCommitsSunday:        newMetricGithubCommitsSunday(settings.GithubCommitsSunday),
		metricGithubCommitsThursday:      newMetricGithubCommitsThursday(settings.GithubCommitsThursday),
		metricGithubCommitsTotalWeekly:   newMetricGithubCommitsTotalWeekly(settings.GithubCommitsTotalWeekly),
		metricGithubCommitsTuesday:       newMetricGithubCommitsTuesday(settings.GithubCommitsTuesday),
		metricGithubCommitsWednesday:     newMetricGithubCommitsWednesday(settings.GithubCommitsWednesday),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithGithubRepoName sets provided value as "github.repo.name" attribute for current resource.
func WithGithubRepoName(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().UpsertString("github.repo.name", val)
	}
}

// WithGithubRepoUsername sets provided value as "github.repo.username" attribute for current resource.
func WithGithubRepoUsername(val string) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		rm.Resource().Attributes().UpsertString("github.repo.username", val)
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).DataType() {
			case pmetric.MetricDataTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricDataTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/githubmetricsreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricGithubCodechangesAdditions.emit(ils.Metrics())
	mb.metricGithubCodechangesDeletions.emit(ils.Metrics())
	mb.metricGithubCommitsFriday.emit(ils.Metrics())
	mb.metricGithubCommitsMonday.emit(ils.Metrics())
	mb.metricGithubCommitsSaturday.emit(ils.Metrics())
	mb.metricGithubCommitsSunday.emit(ils.Metrics())
	mb.metricGithubCommitsThursday.emit(ils.Metrics())
	mb.metricGithubCommitsTotalWeekly.emit(ils.Metrics())
	mb.metricGithubCommitsTuesday.emit(ils.Metrics())
	mb.metricGithubCommitsWednesday.emit(ils.Metrics())
	for _, op := range rmo {
		op(rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordGithubCodechangesAdditionsDataPoint adds a data point to github.codechanges.additions metric.
func (mb *MetricsBuilder) RecordGithubCodechangesAdditionsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCodechangesAdditions.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCodechangesDeletionsDataPoint adds a data point to github.codechanges.deletions metric.
func (mb *MetricsBuilder) RecordGithubCodechangesDeletionsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCodechangesDeletions.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsFridayDataPoint adds a data point to github.commits.friday metric.
func (mb *MetricsBuilder) RecordGithubCommitsFridayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsFriday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsMondayDataPoint adds a data point to github.commits.monday metric.
func (mb *MetricsBuilder) RecordGithubCommitsMondayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsMonday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsSaturdayDataPoint adds a data point to github.commits.saturday metric.
func (mb *MetricsBuilder) RecordGithubCommitsSaturdayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsSaturday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsSundayDataPoint adds a data point to github.commits.sunday metric.
func (mb *MetricsBuilder) RecordGithubCommitsSundayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsSunday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsThursdayDataPoint adds a data point to github.commits.thursday metric.
func (mb *MetricsBuilder) RecordGithubCommitsThursdayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsThursday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsTotalWeeklyDataPoint adds a data point to github.commits.total.weekly metric.
func (mb *MetricsBuilder) RecordGithubCommitsTotalWeeklyDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsTotalWeekly.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsTuesdayDataPoint adds a data point to github.commits.tuesday metric.
func (mb *MetricsBuilder) RecordGithubCommitsTuesdayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsTuesday.recordDataPoint(mb.startTime, ts, val)
}

// RecordGithubCommitsWednesdayDataPoint adds a data point to github.commits.wednesday metric.
func (mb *MetricsBuilder) RecordGithubCommitsWednesdayDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricGithubCommitsWednesday.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
